{# Tenant l3 interfaces #}
{% set l3_interface_subif_parents = [] %}
ethernet_interfaces:
{% for tenant in network_services_data.tenants %}
{%     for vrf in tenant.vrfs %}
{%         for l3_interface in vrf.l3_interfaces | arista.avd.default([]) %}
{%             if l3_interface.nodes is arista.avd.defined and inventory_hostname in l3_interface.nodes and l3_interface.ip_addresses is arista.avd.defined and l3_interface.interfaces is arista.avd.defined %}
{%                 for node in l3_interface.nodes %}
{%                     if node == inventory_hostname %}
{%                         if '.' in l3_interface.interfaces[loop.index0] %}
{%                             set l3_interface_subif_id = l3_interface.encapsulation_dot1q_vlan[loop.index0] | arista.avd.default(
                                                           l3_interface.interfaces[loop.index0].split('.') | last) %}
{%                             do l3_interface_subif_parents.append(l3_interface.interfaces[loop.index0].split('.') | first) %}
{%                         endif %}
  {{ l3_interface.interfaces[loop.index0] }}:
{%                         if l3_interface_subif_id is arista.avd.defined %}
    type: l3dot1q
    encapsulation_dot1q_vlan: {{ l3_interface_subif_id }}
{%                         else %}
    type: routed
{%                         endif %}
    peer_type: l3_interface
    vrf: {{ vrf.name }}
    ip_address: {{ l3_interface.ip_addresses[loop.index0] }}
{%                         if l3_interface.mtu is arista.avd.defined %}
    mtu: {{ l3_interface.mtu }}
{%                         endif %}
{%                         if l3_interface.enabled is arista.avd.defined(false) %}
    shutdown: true
{%                         else %}
    shutdown: false
{%                         endif %}
{%                         if l3_interface.description is arista.avd.defined %}
    description: {{ l3_interface.description }}
{%                         endif %}
{%                         if l3_interface.ospf.enabled is arista.avd.defined(true) and vrf.ospf.enabled is arista.avd.defined(true) %}
    ospf_area: {{ l3_interface.ospf.area | arista.avd.default(0) }}
    ospf_network_point_to_point: {{ l3_interface.ospf.point_to_point | arista.avd.default(true) }}
{%                             if l3_interface.ospf.cost is arista.avd.defined %}
    ospf_cost: {{ l3_interface.ospf.cost }}
{%                             endif %}
{%                             if l3_interface.ospf.authentication is arista.avd.defined("simple") and l3_interface.ospf.simple_auth_key is arista.avd.defined %}
    ospf_authentication: "simple"
    ospf_authentication_key: {{ l3_interface.ospf.simple_auth_key }}
{%                             elif l3_interface.ospf.authentication is arista.avd.defined("message-digest") and l3_interface.ospf.message_digest_keys is arista.avd.defined %}
    ospf_authentication: "message-digest"
    ospf_message_digest_keys:
{%                                 for key in l3_interface.ospf.message_digest_keys | arista.avd.natural_sort %}
{%                                     if key.id is arista.avd.defined and key.key is arista.avd.defined %}
      {{ key.id }}:
        hash_algorithm: {{ key.hash_algorithm | arista.avd.default("sha512") }}
        key: {{ key.key }}
{%                                     endif %}
{%                                 endfor %}
{%                             endif %}
{%                         endif %}
{%                         if l3_interface.raw_eos_cli is arista.avd.defined %}
    eos_cli: |
      {{ l3_interface.raw_eos_cli | indent(6,false) }}
{%                         endif %}
{%                         if l3_interface.structured_config is arista.avd.defined %}
    struct_cfg: {{ l3_interface.structured_config }}
{%                         endif %}
{%                     endif %}
{%                 endfor %}
{%             endif %}
{%         endfor %}
{%     endfor %}
{% endfor %}
{# Create parent / base interfaces as routed. Will be merged onto structured config, #}
{# so even if the same interfaces are created elsewhere, it will still work. #}
{% for l3_interface_subif_parent in l3_interface_subif_parents | arista.avd.natural_sort | unique %}
  {{ l3_interface_subif_parent }}:
    type: routed
    peer_type: l3_interface
    shutdown: false
{% endfor %}
