name: Release documentation

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
    - 'main'


env:
  ACTION_GITHUB_TAG_ACTION: v5.5
  PACKER_VERSION: "1.7.2"
  APPLICATION_ID: "120620"
  PLAYBOOK_VERSION: "V0.5.4"
  PROJECT: sdn-ansible-ohe-dallas-testbed

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  main:
    environment: services
    # The type of runner that the job will run on
    runs-on: arista2

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Get token Santander-group
      uses: pzamoran/ghe-githubapp-gettoken@feat/pipfile
      id: token-group
      env:
        GITHUB_APP_IDENTIFIER: ${{ env.APPLICATION_ID }}
        GITHUB_PRIVATE_KEY: ${{ secrets.APPLICATION_PRIVATE_KEY }}
      with:
        args: '--github-organization cloud-competence-center'

    - uses: actions/checkout@v2
      with:
        repository: cloud-competence-center/sdn-ansible-network-ohe
        ref: "{{ env.PLAYBOOK_VERSION }}"
        token: '${{ steps.token-group.outputs.token }}'
        path: playbook

    - name: Create decrypt ansible vault
      run:  |
        echo ${{ secrets.VAULT_PASSWORD }} >> .vault

    - name: ansible-playbook build
      run:  |
         unset http_proxy
         unset HTTP_PROXY
         unset HTTPS_PROXY
         unset https_proxy
         cd playbook
         ansible-playbook -i ../inventory/ --vault-password-file ../.vault playbooks/arista/arista_create_doc.yml
         cp -rp README.adoc ../

    - name: Add & Commit
      uses: EndBug/add-and-commit@v9.0.0
      with:
        message: "[Actions] Doc autogenerate"

  build:
    needs: main
    environment: services
    # The type of runner that the job will run on
    runs-on: almmc_redhat_runner

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Get token ALM Multicloud
      uses: pzamoran/ghe-githubapp-gettoken@v0.2.1
      id: get_workflow_alm_token
      env:
        GITHUB_APP_IDENTIFIER: ${{ env.APPLICATION_ID }}
        GITHUB_PRIVATE_KEY: ${{ secrets.APPLICATION_PRIVATE_KEY }}
      with:
        args: '--github-organization alm-multicloud'


    - name: Bump version and push tag
      id: tag_version
      uses: mathieudutour/github-tag-action@v5.1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        release_branches: main
        pre_release_branches: development, feature.*
        append_to_pre_release_tag: snap
        dry_run: true


    - name: "Get build info"
      id: build_info
      shell: bash
      run: |
        asdf local python 3.8.10
        pipenv run pip install --exists-action w -e "git+https://x-access-token:${{ steps.get_workflow_alm_token.outputs.token }}@github.com/alm-multicloud/almmc-app-python-changelog.git#egg=changelog"

        release_body=`pipenv run changelog ${GITHUB_REPOSITORY} -t ${{ github.token }} -sr v${{steps.tag_version.outputs.previous_tag}} -b main`
        release_body="${release_body//'%'/%25}"
        release_body="${release_body//$'\n'/%0A}"
        release_body="${release_body//$'\r'/%0D}"
        echo "##[set-output name=release_body;]$(echo ${release_body})"

    - name: "Create release"
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{steps.tag_version.outputs.new_tag}}
        release_name: Release ${{steps.tag_version.outputs.new_tag}}
        body: |
          ${{steps.build_info.outputs.release_body}}
        draft: false
        prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{steps.tag_version.outputs.new_tag}}
  ## Create a template from source
 # This workflow contains a single job called "build"
  upload-assests:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: build
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - uses: ruby/setup-ruby@v1.64.1
      env:
        ImageOS: ubuntu18
      with:
        bundler-cache: true
        ruby-version: '2.6'

    - name: "Acciidoctor-pdf"
      run: |
        bundle exec asciidoctor-pdf README.adoc -a pdf-theme=first.yml -a pdf-stylesdir=docs/themes/
        mv README.pdf ${{ env.PROJECT }}_${{ needs.build.outputs.version }}.pdf

    - name: Create zip file
      run: zip -r ${{ env.PROJECT }}.zip ${{ env.PROJECT }}_${{ needs.build.outputs.version }}.pdf

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ GITHUB.token }}
      with:
        upload_url: ${{ needs.build.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ${{ env.PROJECT }}.zip
        asset_name: ${{ env.PROJECT }}.zip
        asset_content_type: application/zip
